CREATE PROCEDURE [Data_Load].[SaveDataLock]
	@DataLockId BIGINT,
    @ProcessDateTime DATETIME2,
    @IlrFileName NVARCHAR(50),
    @UkPrn BIGINT,
    @Uln BIGINT,
    @LearnRefNumber NVARCHAR(12),
	@AimSeqNumber BIGINT,
    @PriceEpisodeIdentifier VARCHAR(25),
    @ApprenticeshipId BIGINT,
    @EmployerAccountId BIGINT,
    @EventSource INT,
    @Status INT,
	@HasErrors BIT,
    @IlrStartDate DATE = NULL,
    @IlrStandardCode BIGINT = NULL,
    @IlrProgrammeType INT = NULL,
    @IlrFrameworkCode INT = NULL,
    @IlrPathwayCode INT = NULL,
    @IlrTrainingPrice DECIMAL(12,5) = NULL,
    @IlrEndpointAssessorPrice DECIMAL(12,5) = NULL,
    @IlrPriceEffectiveFromDate DATE = NULL,
    @IlrPriceEffectiveToDate DATE = NULL
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @newId BIGINT;
	
	--Set IsLatest off for the UKPRN/Learner/Price Episode if it exists
	UPDATE [Data_Load].[DAS_DataLocks] 	
	SET [IsLatest] = 0 	
	WHERE [UkPrn] = @UkPrn
		AND [Uln] = @Uln
		AND [PriceEpisodeIdentifier] = @PriceEpisodeIdentifier
		AND [IsLatest] = 1
	   	 
	INSERT INTO [Data_Load].[DAS_DataLocks]
	(
		[DataLockId],
		[ProcessDateTime],
		[IlrFileName],
		[UkPrn],
		[Uln],
		[LearnRefNumber],
		[AimSeqNumber],
		[PriceEpisodeIdentifier],
		[ApprenticeshipId],
		[EmployerAccountId],
		[EventSource],
		[Status],
		[HasErrors],
		[IlrStartDate],
		[IlrStandardCode],
		[IlrProgrammeType],
		[IlrFrameworkCode],
		[IlrPathwayCode],
		[IlrTrainingPrice],
		[IlrEndpointAssessorPrice],
		[IlrPriceEffectiveFromDate],
		[IlrPriceEffectiveToDate]
	)
	VALUES
	(
		@DataLockId,
		@ProcessDateTime,
		@IlrFileName,
		@UkPrn,
		@Uln,
		@LearnRefNumber,
		@AimSeqNumber,
		@PriceEpisodeIdentifier,
		@ApprenticeshipId,
		@EmployerAccountId,
		@EventSource,
		@Status,
		@HasErrors,
		@IlrStartDate,
		@IlrStandardCode,
		@IlrProgrammeType,
		@IlrFrameworkCode,
		@IlrPathwayCode,
		@IlrTrainingPrice,
		@IlrEndpointAssessorPrice,
		@IlrPriceEffectiveFromDate,
		@IlrPriceEffectiveToDate
	)

	SET @newId = scope_identity();

	--Set IsLatest on for the UKPRN/Learner/Price Episode if it exists
	WITH CTE_LatestDataLock AS
	(SELECT TOP 1 [IsLatest] FROM [Data_Load].[DAS_DataLocks]
	WHERE [UkPrn] = @UkPrn
			AND [Uln] = @Uln
			AND [PriceEpisodeIdentifier] = @PriceEpisodeIdentifier
	ORDER BY [ProcessDateTime] DESC, 
			[DataLockId]
	)
	UPDATE CTE_LatestDataLock
		SET [IsLatest] = 1

	--Return the id of the newly inserted row
	SELECT @newId

END
GO
